scilla_version 1

import BoolUtils

library ZDExchange

let fee_ratio_kept = Uint128 997
let fee_ratio_denom = Uint128 1000
let one = Uint128 1
let zero = Uint128 0
let none_uint = None {Uint128}

(* returns Uint128 *)
let input_price =
    fun (input_amount : Uint128) =>
    fun (input_reserve : Uint128) =>
    fun (output_reserve : Uint128) =>
        (* assert input_reserve > 0 and output_reserve > 0 *)
        let input_fee_kept = builtin mul input_amount fee_ratio_kept in
        let numerator = builtin mul input_fee_kept output_reserve in
        let input_reserve_denom = builtin mul input_reserve fee_ratio_denom in
        let denominator = builtin add input_reserve_denom input_fee_kept in
        builtin div numerator denominator

(* returns Uint128 *)
let output_price =
    fun (output_amount : Uint128) =>
    fun (input_reserve : Uint128) =>
    fun (output_reserve : Uint128) =>
        (* assert input_reserve > 0 and output_reserve > 0 *)
        let in_res_out_amount = builtin mul input_reserve output_amount in
        let numerator = builtin mul in_res_out_amount fee_ratio_denom in
        let out_res_amount = builtin sub output_reserve output_amount in
        let denominator = builtin mul out_res_amount fee_ratio_kept in
        let ratio = builtin div numerator denominator in
        builtin add ratio one

let any_zero_double =
    fun (first : Uint128) =>
    fun (second : Uint128) =>
        let f_zero = builtin eq first zero in
        let s_zero = builtin eq second zero in
        orb f_zero s_zero

let any_zero_triple =
    fun (first : Uint128) =>
    fun (second : Uint128) =>
    fun (third : Uint128) =>
        let fs_zero = any_zero_double first second in
        let t_zero = builtin eq third zero in
        andb fs_zero t_zero

let ble =
    fun (b1 : BNum ) =>
    fun (b2 : BNum ) =>
        let b1_lt = builtin blt b1 b2 in
        let b_eq = builtin eq b1 b2 in
        orb b1_lt b_eq

(* Modified from SimpleDex *)
(* returns singleton List Message *)
let one_msg =
    fun (msg : Message) =>
        let nil_msg = Nil {Message} in
        Cons {Message} msg nil_msg

(* Modified from FungibleToken *)
let min_int =
  fun (a : Uint128) => fun (b : Uint128) =>
  let alt = builtin lt a b in
  match alt with
  | True =>
    a
  | False =>
    b
  end

let le_int =
  fun (a : Uint128) => fun (b : Uint128) =>
    let x = builtin lt a b in
    match x with
    | True => True
    | False =>
      let y = builtin eq a b in
      match y with
      | True => True
      | False => False
      end
    end

contract ZDExchange
()

field tokenCount : Uint128 = zero
field id_to_token : Map Uint128 ByStr20 = Emp Uint128 ByStr20
(* field token_names : Map ByStr20 String = Emp ByStr20 String *)
(* field token_symbols : Map ByStr20 String = Emp ByStr20 String *)
(* field token_decimals : Map ByStr20 Uint32 = Emp ByStr20 Uint32 *)
field token_totalSupplies : Map ByStr20 Uint128 = Emp ByStr20 Uint128
field token_balances : Map ByStr20 (Map ByStr20 Uint128) = Emp ByStr20 (Map ByStr20 Uint128)
field token_allowances : Map ByStr20 (Map ByStr20 (Map ByStr20 Uint128)) = Emp ByStr20 (Map ByStr20 (Map ByStr20 Uint128))

(* Modify state to keep track of transfer funds *)
field tx_pending_debt : Uint128 = zero

transition CreateMarket (token : ByStr20)
    (* Modifies fields tokenCount, id_to_token token_totalSupplies, *)
    (* token_balances, token_allowances *)
    (* if returned, modifies token_names, token_symbols, token_decimals *)
    (* returns Bool in created *)
    balances <- token_balances[token];
    match balances with
    |   Some bs =>
        msg = { _tag : "CreateMarketFailure"; _recipient : _sender; _amount : zero;
                token : token;
                created : False;
                message : "Token already present" };
        msgs = one_msg msg;
        send msgs
    |   None =>
        (* Update tokenCount *)
        tC <- tokenCount;
        tC_new = builtin add tC one;
        tokenCount := tC_new;
        (* Update id_to_token *)
        id_to_token[tC_new] := token;
        (* Update token_totalSupplies *)
        token_totalSupplies[token] := zero;
        (* Update token_balances *)
        balances_new = Emp ByStr20 Uint128;
        token_balances[token] := balances_new;
        (* Update token_allowances *)
        allowances_new = Emp ByStr20 (Map ByStr20 Uint128);
        token_allowances[token] := allowances_new;
        msg = { _tag : "CreateMarketSuccess"; _recipient : _sender; _amount : zero;
                token : token;
                created : True };
        msgs = one_msg msg;
        send msgs
    end
end

transition AddLiquidity (token : ByStr20, min_liquidity : Uint128,
        max_tokens : Uint128, deadline : BNum)
    (* payable *)
    (* Modifies fields token_totalSupplies, token_balances *)
    (* returns Uint128 *)
end

transition RemoveLiquidity (token : ByStr20, min_zil : Uint128,
        deadline : BNum, recipient : ByStr20)
    (* Modifies fields token_totalSupplies, token_balances *)
    (* returns Uint128 *)
    (* sends funds *)
end

transition ZilToTokenInput (token : ByStr20, zil_sold : Uint128, min_tokens : Uint128,
        deadline : BNum, buyer : ByStr20, recipient : ByStr20)
    (* private *)
    (* calls FungibleToken.Transfer() *)
    match _sender with
    |   _this_address =>
        token_reserve <- token_totalSupplies[token];
        match token_reserve with
        |   Some t_r =>
            bal <- _balance;
            bal_subbed = builtin sub bal zil_sold;
            any_param_zero = any_zero_triple zil_sold bal_subbed t_r;
            match any_param_zero with
            |   False =>
                blocknumber <- & BLOCKNUMBER;
                block_valid = ble blocknumber deadline;
                match block_valid with
                |   True =>
                    tokens_bought = input_price zil_sold bal_subbed t_r;
                    enough_bought = le_int min_tokens tokens_bought;
                    match enough_bought with
                    |   True =>
                        msg = { _tag : "Transfer"; _recipient : token; _amount : zero;
                                to : buyer; tokens : tokens_bought};
                        msgs = one_msg msg;
                        send msgs
                    |   False =>
                        msg = { _tag : "ZilToTokenInputFailure"; _recipient : buyer; _amount : zil_sold;
                                token : token;
                                zil_sold : zil_sold; min_tokens : min_tokens;
                                deadline : deadline; buyer : buyer; recipient : recipient;
                                message : "Minimum order not met"};
                        msgs = one_msg msg;
                        send msgs
                    end
                |   False =>
                    msg = { _tag : "ZilToTokenInputFailure"; _recipient : buyer; _amount : zil_sold;
                            token : token;
                            zil_sold : zil_sold; min_tokens : min_tokens;
                            deadline : deadline; buyer : buyer; recipient : recipient;
                            message : "Order expired"};
                    msgs = one_msg msg;
                    send msgs
                end
            |   True =>
                msg = { _tag : "ZilToTokenInputFailure"; _recipient : buyer; _amount : zil_sold;
                        token : token;
                        zil_sold : zil_sold; min_tokens : min_tokens;
                        deadline : deadline; buyer : buyer; recipient : recipient;
                        message : "One of zil_sold, bal_subbed, token_reserve is zero"};
                msgs = one_msg msg;
                send msgs
            end
        |   None =>
            msg = { _tag : "ZilToTokenInputFailure"; _recipient : buyer; _amount : zil_sold;
                    token : token;
                    zil_sold : zil_sold; min_tokens : min_tokens;
                    deadline : deadline; buyer : buyer; recipient : recipient;
                    message : "Token not found"};
            msgs = one_msg msg;
            send msgs
        end
    end
end

transition ZilToTokenSwapInput (token : ByStr20, min_tokens : Uint128,
        deadline : BNum)
    (* payable *)
    (* calls ZilToTokenInput() *)
    accept;
    msg = { _tag : "ZilToTokenInput"; _recipient : _this_address; _amount : zero;
            token : token; zil_sold : _amount; min_tokens : min_tokens;
            deadline : deadline; buyer : _sender; recipient : _sender };
    msgs = one_msg msg;
    send msgs
end

transition ZilToTokenTransferInput (token : ByStr20, min_tokens : Uint128,
        deadline : BNum, recipient : ByStr20)
    (* payable *)
    (* calls ZilToTokenInput() *)
    r_eq_ta = builtin eq recipient _this_address;
    match r_eq_ta with
    |   True =>
        msg = { _tag : "ZilToTokenTransferInputFailure"; _recipient : _sender; _amount : zero;
                token : token; min_tokens : min_tokens; deadline : deadline; recipient : recipient;
                message : "ZDExchange cannot be recipient" };
        msgs = one_msg msg;
        send msgs
    |   False =>
        accept;
        msg = { _tag : "ZilToTokenInput"; _recipient : _this_address; _amount : zero;
                token : token; zil_sold : _amount; min_tokens : min_tokens;
                deadline : deadline; buyer : _sender; recipient : recipient };
        msgs = one_msg msg;
        send msgs
    end
end

transition ZilToTokenOutput (token : ByStr20, tokens_bought : Uint128, max_zil : Uint128,
        deadline : BNum, buyer : ByStr20, recipient : ByStr20)
    (* private *)
    (* calls FungibleToken.Transfer() *)
    (* Refunds provided through TransferSuccess *)
    match _sender with
    |   _this_address =>
        token_reserve <- token_totalSupplies[token];
        match token_reserve with
        |   Some t_r =>
            bal <- _balance;
            bal_subbed = builtin sub bal max_zil;
            any_param_zero = any_zero_triple tokens_bought max_zil t_r;
            match any_param_zero with
            |   False =>
                blocknumber <- & BLOCKNUMBER;
                block_valid = ble blocknumber deadline;
                match block_valid with
                |   True =>
                    zil_sold = output_price tokens_bought max_zil t_r;
                    zil_refund = builtin sub max_zil zil_sold;
                    tx_pending_debt := zil_refund;
                    msg = { _tag : "Transfer"; _recipient : token; _amount : zero;
                            to : recipient; tokens : tokens_bought};
                    msgs = one_msg msg;
                    send msgs
                |   False =>
                    msg = { _tag : "ZilToTokenOutputFailure"; _recipient : buyer; _amount : zero;
                            token : token;
                            tokens_bought : tokens_bought; max_zil : max_zil;
                            deadline : deadline; buyer : buyer; recipient : recipient;
                            message : "Order expired"};
                    msgs = one_msg msg;
                    send msgs
                end
            |   True =>
                msg = { _tag : "ZilToTokenOutputFailure"; _recipient : buyer; _amount : zero;
                        token : token;
                        tokens_bought : tokens_bought; max_zil : max_zil;
                        deadline : deadline; buyer : buyer; recipient : recipient;
                        message : "One of tokens_bought, max_zil, token_reserve is zero"};
                msgs = one_msg msg;
                send msgs
            end
        |   None =>
            msg = { _tag : "ZilToTokenOutputFailure"; _recipient : buyer; _amount : zero;
                    token : token;
                    tokens_bought : tokens_bought; max_zil : max_zil;
                    deadline : deadline; buyer : buyer; recipient : recipient;
                    message : "Token not found"};
            msgs = one_msg msg;
            send msgs
        end
    end
end

transition ZilToTokenSwapOutput (token : ByStr20, tokens_bought : Uint128,
        deadline : BNum)
    (* payable *)
    (* calls ZilToTokenOutput() *)
    accept;
    msg = { _tag : "ZilToTokenOutput"; _recipient : _this_address; _amount : zero;
            token : token;
            tokens_bought : tokens_bought; max_zil : _amount;
            deadline : deadline; buyer : _sender; recipient : _sender };
    msgs = one_msg msg;
    send msgs
end

transition ZilToTokenTransferOutput(token : ByStr20, tokens_bought : Uint128,
        deadline : BNum, recipient : ByStr20)
    (* payable *)
    (* calls ZilToTokenOutput() *)
    r_eq_ta = builtin eq recipient _this_address;
    match r_eq_ta with
    |   True =>
        msg = { _tag : "ZilToTokenTransferOutputFailure"; _recipient : _sender; _amount : zero;
                token : token; tokens_bought : tokens_bought; deadline : deadline; recipient : recipient;
                message : "ZDExchange cannot be recipient" };
        msgs = one_msg msg;
        send msgs
    |   False =>
        accept;
        msg = { _tag : "ZilToTokenOutput"; _recipient : _this_address; _amount : zero;
                token : token;
                tokens_bought : tokens_bought; max_zil : _amount;
                deadline : deadline; buyer : _sender; recipient : recipient };
        msgs = one_msg msg;
        send msgs
    end
end

transition TokenToZilInput (token : ByStr20, tokens_sold : Uint128,
        min_zil : Uint128, deadline : BNum, buyer : ByStr20, recipient : ByStr20)
    (* private *)
    (* calls FungibleToken.TransferFrom() *)
    (* Payment provided through TransferFromSuccess *)
    match _sender with
    |   _this_address =>
        token_reserve <- token_totalSupplies[token];
        match token_reserve with
        |   Some t_r =>
            bal <- _balance;
            any_param_zero = any_zero_triple tokens_sold t_r bal;
            match any_param_zero with
            |   False =>
                blocknumber <- & BLOCKNUMBER;
                block_valid = ble blocknumber deadline;
                match block_valid with
                |   True =>
                    zil_bought = input_price tokens_sold t_r bal;
                    enough_bought = le_int min_zil zil_bought;
                    match enough_bought with
                    |   True =>
                        msg = { _tag : "TransferFrom"; _recipient : token; _amount : zero;
                                from : buyer; to : _this_address; tokens : tokens_sold};
                        msgs = one_msg msg;
                        send msgs
                    |   False =>
                        msg = { _tag : "TokenToZilInputFailure"; _recipient : buyer; _amount : zero;
                                token : token;
                                tokens_sold : tokens_sold; min_zil : min_zil;
                                deadline : deadline; buyer : buyer; recipient : recipient;
                                message : "Minimum order not met"};
                        msgs = one_msg msg;
                        send msgs
                    end
                |   False =>
                    msg = { _tag : "TokenToZilInputFailure"; _recipient : buyer; _amount : zero;
                            token : token;
                            tokens_sold : tokens_sold; min_zil : min_zil;
                            deadline : deadline; buyer : buyer; recipient : recipient;
                            message : "Order expired"};
                    msgs = one_msg msg;
                    send msgs
                end
            |   True =>
                msg = { _tag : "TokenToZilInputFailure"; _recipient : buyer; _amount : zero;
                        token : token;
                        tokens_sold : tokens_sold; min_zil : min_zil;
                        deadline : deadline; buyer : buyer; recipient : recipient;
                        message : "One of tokens_sold, _balance, token_reserve is zero"};
                msgs = one_msg msg;
                send msgs
            end
        |   None =>
            msg = { _tag : "TokenToZilInputFailure"; _recipient : buyer; _amount : zero;
                    token : token;
                    tokens_sold : tokens_sold; min_zil : min_zil;
                    deadline : deadline; buyer : buyer; recipient : recipient;
                    message : "Token not found"};
            msgs = one_msg msg;
            send msgs
        end
    end
end

transition TokenToZilSwapInput (token : ByStr20, tokens_sold : Uint128,
        min_zil : Uint128, deadline : BNum)
    (* calls TokenToZilInput() *)
    msg = { _tag : "TokenToZilInput"; _recipient : _this_address; _amount : zero;
            token : token;
            tokens_sold : tokens_sold; min_zil : min_zil;
            deadline : deadline; buyer : _sender; recipient : _sender };
    msgs = one_msg msg;
    send msgs
end

transition TokenToZilTransferInput (token : ByStr20, tokens_sold : Uint128,
        min_zil : Uint128, deadline : BNum, recipient : ByStr20)
    (* calls TokenToZilInput() *)
    r_eq_ta = builtin eq recipient _this_address;
    match r_eq_ta with
    |   True =>
        msg = { _tag : "TokenToZilTransferInputFailure"; _recipient : _sender; _amount : zero;
                token : token; min_zil : min_zil; deadline : deadline; recipient : recipient;
                message : "ZDExchange cannot be recipient" };
        msgs = one_msg msg;
        send msgs
    |   False =>
        msg = { _tag : "TokenToZilInput"; _recipient : _this_address; _amount : zero;
                token : token;
                tokens_sold : tokens_sold; min_zil : min_zil;
                deadline : deadline; buyer : _sender; recipient : recipient };
        msgs = one_msg msg;
        send msgs
    end
end

transition TokenToZilSwapOutput (token : ByStr20, zil_bought : Uint128,
        max_tokens : Uint128, deadline : BNum)
    (* calls FungibleToken.TransferFrom() *)
    (* returns Uint128 *)
end

transition TokenToZilTransferOutput (token : ByStr20, zil_bought : Uint128,
        max_tokens : Uint128, deadline : BNum, recipient : ByStr20)
    (* calls FungibleToken.TransferFrom() *)
    (* returns Uint128 *)
end

transition TokenToTokenSwapInput (token : ByStr20, tokens_sold : Uint128,
        min_tokens_bought : Uint128, min_zil_bought : Uint128,
        deadline : BNum, token_other : ByStr20)
    (* calls FungibleToken.Transfer(), FungibleToken.TransferFrom() *)
    (* returns Uint128 *)
end

transition TokenToTokenTransferInput(token : ByStr20, tokens_sold : Uint128,
        min_tokens_bought : Uint128, min_zil_bought : Uint128,
        deadline : BNum, token_other : ByStr20, recipient : ByStr20)
    (* calls FungibleToken.Transfer(), FungibleToken.TransferFrom() *)
    (* returns Uint128 *)
end

transition TokenToTokenSwapOutput (token : ByStr20, tokens_bought : Uint128,
        max_tokens_sold : Uint128, max_zil_sold : Uint128,
        deadline : BNum, token_other : ByStr20)
    (* calls FungibleToken.Transfer(), FungibleToken.TransferFrom() *)
    (* returns Uint128 *)
end

transition TokenToTokenTransferOutput (token : ByStr20, tokens_bought : Uint128,
        max_tokens_sold : Uint128, max_zil_sold : Uint128,
        deadline : BNum, token_other : ByStr20, recipient : ByStr20)
    (* calls FungibleToken.Transfer(), FungibleToken.TransferFrom() *)
    (* returns Uint128 *)
end

(** FungibleToken-like Transitions **)

(* Transfer deposited token balance of _sender *)
transition Transfer (token : ByStr20, to: ByStr20, tokens : Uint128)
    (* Modifies field token_balances *)
    (* returns Bool in transferred *)
    balances <- token_balances[token];
    match balances with
    |   Some bs =>
        (* Modified from FungibleToken *)
        bal <- token_balances[token][_sender];
        match bal with
        | Some b =>
          can_do = le_int tokens b;
          match can_do with
          | True =>
            (* subtract tokens from _sender and add it to "to" *)
            new_sender_bal = builtin sub b tokens;
            token_balances[token][_sender] := new_sender_bal;

            (* Adds tokens to "to" address *)
            to_bal <- token_balances[token][to];
            new_to_bal = match to_bal with
            | Some x => builtin add x tokens
            | None => tokens
            end;
        	token_balances[token][to] := new_to_bal;
            msg = { _tag : "TransferSuccess"; _recipient : _sender; _amount : zero;
                    token : token; to : to; tokens : tokens;
                    transferred : True };
            msgs = one_msg msg;
            send msgs
          | False =>
            (* balance not sufficient. *)
            msg = { _tag : "TransferFailure"; _recipient : _sender; _amount : zero;
                    token : token; to : to; tokens : tokens;
                    transferred : False;
                    message : "Balance not Sufficient" };
            msgs = one_msg msg;
            send msgs
          end
        | None =>
            (* no balance record, can't transfer *)
        	msg = { _tag : "TransferFailure"; _recipient : _sender; _amount : zero;
                    token : token; to : to; tokens : tokens;
                    transferred : False;
                    message : "Balance not Found" };
            msgs = one_msg msg;
            send msgs
        end
    |   None =>
        msg = { _tag : "TransferFailure"; _recipient : _sender; _amount : zero;
                token : token; to : to; tokens : tokens;
                transferred : False;
                message : "Token not Found" };
        msgs = one_msg msg;
        send msgs
    end
end

transition TransferFrom (token : ByStr20, from : ByStr20, to: ByStr20,
        tokens : Uint128)
    (* Modifies field token_balances *)
    (* returns Bool in transferred *)
    balances <- token_balances[token];
    match balances with
    |   Some bs =>
        (* Modified from FungibleToken *)
        bal <- token_balances[token][from];
        match bal with
        | Some b =>
          can_do = le_int tokens b;
          match can_do with
          | True =>
            (* subtract tokens from from and add it to "to" *)
            allowance <- token_allowances[token][from][to];
            match allowance with
            |   Some a =>
                allowance_sufficient = le_int tokens a;
                match allowance_sufficient with
                |   True =>
                    new_from_bal = builtin sub b tokens;
                    token_balances[token][from] := new_from_bal;

                    (* Adds tokens to "to" address *)
                    to_bal <- token_balances[token][to];
                    new_to_bal = match to_bal with
                    | Some x => builtin add x tokens
                    | None => tokens
                    end;
                	  token_balances[token][to] := new_to_bal;
                    msg = { _tag : "TransferFromSuccess"; _recipient : _sender; _amount : zero;
                            token : token; from : from; to : to; tokens : tokens;
                            transferredFrom : True };
                    msgs = one_msg msg;
                    send msgs
                |   False =>
                    msg = { _tag : "TransferFromFailure"; _recipient : _sender; _amount : zero;
                            token : token; from : from; to : to; tokens : tokens;
                            transferredFrom : False;
                            message : "Allowance not Sufficient" };
                    msgs = one_msg msg;
                    send msgs
                end
            |   None =>
                msg = { _tag : "TransferFromFailure"; _recipient : _sender; _amount : zero;
                        token : token; from : from; to : to; tokens : tokens;
                        transferredFrom : False;
                        message : "Allowance not Found" };
                msgs = one_msg msg;
                send msgs
            end
          | False =>
            (* balance not sufficient. *)
            msg = { _tag : "TransferFromFailure"; _recipient : _sender; _amount : zero;
                    token : token; from : from; to : to; tokens : tokens;
                    transferredFrom : False;
                    message : "Balance not Sufficient" };
            msgs = one_msg msg;
            send msgs
          end
        | None =>
            (* no balance record, can't transfer *)
        	msg = { _tag : "TransferFromFailure"; _recipient : _sender; _amount : zero;
                    token : token; from : from; to : to; tokens : tokens;
                    transferredFrom : False;
                    message : "Balance not Found" };
            msgs = one_msg msg;
            send msgs
        end
    |   None =>
        msg = { _tag : "TransferFromFailure"; _recipient : _sender; _amount : zero;
                token : token; from : from; to : to; tokens : tokens;
                transferredFrom : False;
                message : "Token not Found" };
        msgs = one_msg msg;
        send msgs
    end
end

transition Approve (token : ByStr20, spender : ByStr20, tokens : Uint128)
    (* Modifies field token_allowances *)
    (* returns Bool in approved *)
    allowances <- token_allowances[token];
    match allowances with
    |   Some as =>
        token_allowances[token][_sender][spender] := tokens;
        msg = { _tag : "ApproveResponse"; _recipient : _sender; _amount : zero;
                token : token; spender : spender; tokens : tokens;
                approved : True };
        msgs = one_msg msg;
        send msgs
    |   None =>
        msg = { _tag : "ApproveResponse"; _recipient : _sender; _amount : zero;
                token : token; spender : spender; tokens : tokens;
                approved : False;
                message : "Token not Found" };
        msgs = one_msg msg;
        send msgs
    end
end

(* Input Price function for Zil -> Token trades *)
transition ZilToTokenInputPrice (token : ByStr20, zil_sold : Uint128)
    (* returns Uint128 in price *)
    (* zero in price indicates failure *)
    token_reserve <- token_totalSupplies[token];
    match token_reserve with
    |   None =>
        msg = { _tag : "ZilToTokenInputPriceFailure"; _recipient : _sender; _amount : zero;
                token : token; zil_sold : zil_sold;
                price : zero;
                message : "Token not Found" };
        msgs = one_msg msg;
        send msgs
    |   Some t_r =>
        bal <- _balance;
        any_param_zero = any_zero_triple zil_sold bal t_r;
        match any_param_zero with
        |   True =>
            msg = { _tag : "ZilToTokenInputPriceFailure"; _recipient : _sender; _amount : zero;
                    token : token; zil_sold : zil_sold;
                    price : zero;
                    message : "One of _balance, token balance, zil_sold is zero" };
            msgs = one_msg msg;
            send msgs
        |   False =>
            price = input_price zil_sold bal t_r;
            msg = { _tag : "ZilToTokenInputPriceSuccess"; _recipient : _sender; _amount : zero;
                    token : token; zil_sold : zil_sold;
                    price : price };
            msgs = one_msg msg;
            send msgs
        end
    end
end

(* Output Price function for Zil -> Token trades *)
transition ZilToTokenOutputPrice (token : ByStr20, tokens_bought : Uint128)
    (* returns Uint128 in price *)
    (* zero in price indicates failure *)
    token_reserve <- token_totalSupplies[token];
    match token_reserve with
    |   None =>
        msg = { _tag : "ZilToTokenOutputPriceFailure"; _recipient : _sender; _amount : zero;
                token : token; tokens_bought : tokens_bought;
                price : zero;
                message : "Token not Found" };
        msgs = one_msg msg;
        send msgs
    |   Some t_r =>
        bal <- _balance;
        any_param_zero = any_zero_triple tokens_bought bal t_r;
        match any_param_zero with
        |   True =>
            msg = { _tag : "ZilToTokenOutputPriceFailure"; _recipient : _sender; _amount : zero;
                    token : token; tokens_bought : tokens_bought;
                    price : zero;
                    message : "One of _balance, token balance, tokens_bought is zero" };
            msgs = one_msg msg;
            send msgs
        |   False =>
            price = output_price tokens_bought bal t_r;
            msg = { _tag : "ZilToTokenOutputPriceSuccess"; _recipient : _sender; _amount : zero;
                    token : token; tokens_bought : tokens_bought;
                    price : price };
            msgs = one_msg msg;
            send msgs
        end
    end
end

(* Input Price function for Token -> Zil trades *)
transition TokenToZilInputPrice (token : ByStr20, tokens_sold : Uint128)
    (* returns Uint128 in price *)
    (* zero in price indicates failure *)
    token_reserve <- token_totalSupplies[token];
    match token_reserve with
    |   None =>
        msg = { _tag : "TokenToZilInputPriceFailure"; _recipient : _sender; _amount : zero;
                token : token; tokens_sold : tokens_sold;
                price : zero;
                message : "Token not Found" };
        msgs = one_msg msg;
        send msgs
    |   Some t_r =>
        bal <- _balance;
        any_param_zero = any_zero_triple tokens_sold t_r bal;
        match any_param_zero with
        |   True =>
            msg = { _tag : "Main"; _recipient : _sender; _amount : zero;
                    token : token; tokens_sold : tokens_sold;
                    price : zero;
                    message : "One of _balance, token balance, tokens_sold is zero" };
            msgs = one_msg msg;
            send msgs
        |   False =>
            price = input_price tokens_sold t_r bal;
            msg = { _tag : "Main"; _recipient : _sender; _amount : zero;
                    token : token; tokens_sold : tokens_sold;
                    price : price };
            msgs = one_msg msg;
            send msgs
        end
    end
end

(* Output Price function for Token -> Zil trades *)
transition TokenToZilOutputPrice (token : ByStr20, zil_bought : Uint128)
    (* returns Uint128 in price *)
    (* zero in price indicates failure *)
    token_reserve <- token_totalSupplies[token];
    match token_reserve with
    |   None =>
        msg = { _tag : "TokenToZilOutputPriceFailure"; _recipient : _sender; _amount : zero;
                token : token; zil_bought : zil_bought;
                price : zero;
                message : "Token not Found" };
        msgs = one_msg msg;
        send msgs
    |   Some t_r =>
        bal <- _balance;
        any_param_zero = any_zero_triple zil_bought t_r bal;
        match any_param_zero with
        |   True =>
            msg = { _tag : "TokenToZilOutputPriceFailure"; _recipient : _sender; _amount : zero;
                    token : token; zil_bought : zil_bought;
                    price : zero;
                    message : "One of _balance, token balance, zil_bought is zero" };
            msgs = one_msg msg;
            send msgs
        |   False =>
            price = input_price zil_bought t_r bal;
            msg = { _tag : "TokenToZilOutputPriceSuccess"; _recipient : _sender; _amount : zero;
                    token : token; zil_bought : zil_bought;
                    price : price };
            msgs = one_msg msg;
            send msgs
        end
    end
end

(* Gets token address from token_id *)
transition TokenAddress (token_id : Uint128)
    (* returns Option ByStr20 in token_address *)
    token_address <- id_to_token[token_id];
    msg = { _tag : "TokenAddressResponse"; _recipient : _sender; _amount : zero;
            token_id : token_id;
            token_address : token_address };
    msgs = one_msg msg;
    send msgs
end

(** FungibleToken-like Constant Transitions **)

(* Checks deposited token balance of tokenOwner *)
transition BalanceOf (token : ByStr20, tokenOwner : ByStr20)
    (* returns Uint128 in balance *)
    (* message gives extra info *)
    balances <- token_balances[token];
    match balances with
    |   Some bs =>
        balance <- token_balances[token][tokenOwner];
        match balance with
        |   Some b =>
            msg = { _tag : "BalanceOfResponse"; _recipient : _sender; _amount : zero;
                    token : token; tokenOwner : tokenOwner;
                    balance : b };
            msgs = one_msg msg;
            send msgs
        |   None =>
            msg = { _tag : "BalanceOfResponse"; _recipient : _sender; _amount : zero;
                    token : token; tokenOwner : tokenOwner;
                    balance : zero };
            msgs = one_msg msg;
            send msgs
        end
    |   None =>
            msg = { _tag : "BalanceOfResponse"; _recipient : _sender; _amount : zero;
                    token : token; tokenOwner : tokenOwner;
                    balance : zero;
                    message : "Token not Found" };
            msgs = one_msg msg;
            send msgs
    end
end

(* Checks allowance of spender with tokenOwner *)
transition Allowance (token : ByStr20, tokenOwner : ByStr20, spender : ByStr20)
    (* returns Option Uint128 in allowance *)
    (* message gives extra info *)
    allowances <- token_allowances[token];
    match allowances with
    |   Some as =>
        allowance <- token_allowances[token][tokenOwner][spender];
        match allowance with
        |   Some a =>
            msg = { _tag : "AllowanceResponse"; _recipient : _sender; _amount : zero;
                    token : token; tokenOwner : tokenOwner; spender : spender;
                    allowance : a};
            msgs = one_msg msg;
            send msgs
        |   None =>
            msg = { _tag : "AllowanceResponse"; _recipient : _sender; _amount : zero;
                    token : token; tokenOwner : tokenOwner; spender : spender;
                    allowance : zero};
            msgs = one_msg msg;
            send msgs
        end
    |   None =>
        msg = { _tag : "AllowanceResponse"; _recipient : _sender; _amount : zero;
                token : token; tokenOwner : tokenOwner; spender : spender;
                allowance : zero;
                message : "Token not Found" };
        msgs = one_msg msg;
        send msgs
    end
end

(* Response Functions *)

transition TransferSuccess (sender : ByStr20, recipient : ByStr20, amount : Uint128)
    (* sends funds *)
    match sender with
    |   _this_address =>
        totalSupply <- token_totalSupplies[_sender];
        match totalSupply with
        |   Some tS =>
            tS_new = builtin sub tS amount;
            token_totalSupplies[_sender] := tS_new;
            debt <- tx_pending_debt;
            tx_pending_debt := zero;
            msg = { _tag : "TransferSuccessResponse"; _recipient : recipient; _amount : debt;
                    sender : sender; recipient : recipient; amount : amount };
            msgs = one_msg msg;
            send msgs
        |   None =>
            msg = { _tag : "TransferSuccessResponse"; _recipient : recipient; _amount : zero;
                    sender : sender; recipient : recipient; amount : amount;
                    message : "Token not Found" };
            msgs = one_msg msg;
            send msgs
        end
    end
end

transition TransferFromSuccess (sender : ByStr20, recipient : ByStr20, amount : Uint128)
    (* sends funds *)
    match recipient with
    |   _this_address =>
        totalSupply <- token_totalSupplies[_sender];
        match totalSupply with
        |   Some tS =>
            tS_new = builtin add tS amount;
            token_totalSupplies[_sender] := tS_new;
            debt <- tx_pending_debt;
            tx_pending_debt := zero;
            msg = { _tag : "TransferFromSuccessResponse"; _recipient : sender; _amount : debt;
                    sender : sender; recipient : recipient; amount : amount };
            msgs = one_msg msg;
            send msgs
        |   None =>
            msg = { _tag : "TransferFromSuccessResponse"; _recipient : sender; _amount : zero;
                    sender : sender; recipient : recipient; amount : amount;
                    message : "Token not Found" };
            msgs = one_msg msg;
            send msgs
        end
    end
end
